/*
 * This source file was generated by the Gradle 'init' task
 */
package telegrambot;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

public class App {

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java -jar app-all.jar <path_to_config.json>");
            System.exit(1);
        }

        try {
            // Determine the path for the history file.
            // Use an environment variable for flexibility in Docker, defaulting to the current directory.
            String dataPath = System.getenv("DATA_PATH");
            if (dataPath == null || dataPath.isEmpty()) {
                dataPath = "."; // Default to current directory if not set
            }
            String historyFile = dataPath + File.separator + "histories.json";

            // Load configuration from the file specified in the command-line arguments
            Config config = loadConfig(args[0]);

            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            Bot bot = new Bot(config, historyFile);

            // Add a shutdown hook to save histories on exit
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                bot.persistHistoriesOnShutdown();
            }));

            botsApi.registerBot(bot);
        } catch (IOException e) {
            System.err.println("Error loading configuration file: " + e.getMessage());
        } catch (TelegramApiException e) {
            System.err.println("Error initializing Telegram Bot API: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static Config loadConfig(String path) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(new File(path), Config.class);
    }
}
